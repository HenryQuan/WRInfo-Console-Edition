using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace WoWs_RS.Core
{
    /// <summary>
    /// Generated by QuickType
    /// </summary>
    public partial class TempArenaInfo
    {
        [JsonProperty("clientVersionFromXml")]
        public string ClientVersionFromXml { get; set; }

        [JsonProperty("gameMode")]
        public long GameMode { get; set; }

        [JsonProperty("clientVersionFromExe")]
        public string ClientVersionFromExe { get; set; }

        [JsonProperty("scenarioUiCategoryId")]
        public long ScenarioUiCategoryId { get; set; }

        [JsonProperty("mapDisplayName")]
        public string MapDisplayName { get; set; }

        [JsonProperty("mapId")]
        public long MapId { get; set; }

        [JsonProperty("matchGroup")]
        public string MatchGroup { get; set; }

        [JsonProperty("weatherParams")]
        public Dictionary<string, string[]> WeatherParams { get; set; }

        [JsonProperty("duration")]
        public long Duration { get; set; }

        [JsonProperty("gameLogic")]
        public string GameLogic { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("scenario")]
        public string Scenario { get; set; }

        [JsonProperty("playerID")]
        public long PlayerId { get; set; }

        [JsonProperty("vehicles")]
        public Vehicle[] Vehicles { get; set; }

        [JsonProperty("playersPerTeam")]
        public long PlayersPerTeam { get; set; }

        [JsonProperty("dateTime")]
        public string DateTime { get; set; }

        [JsonProperty("mapName")]
        public string MapName { get; set; }

        [JsonProperty("playerName")]
        public string PlayerName { get; set; }

        [JsonProperty("scenarioConfigId")]
        public long ScenarioConfigId { get; set; }

        [JsonProperty("teamsCount")]
        public long TeamsCount { get; set; }

        [JsonProperty("logic")]
        public string Logic { get; set; }

        [JsonProperty("playerVehicle")]
        public string PlayerVehicle { get; set; }
    }

    public partial class Vehicle
    {
        [JsonProperty("shipId")]
        public long ShipId { get; set; }

        [JsonProperty("relation")]
        public long Relation { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class TempArenaInfo
    {
        public static TempArenaInfo FromJson(string json) => JsonConvert.DeserializeObject<TempArenaInfo>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this TempArenaInfo self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
